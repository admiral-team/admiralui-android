fastlane_require 'dotenv'
require_relative 'build_info'
require_relative 'version'
require_relative 'utils'

before_all do
  Dotenv.overload('.env', '.env.secret')
end

lane :detekt do
  gradle(
    tasks: "detekt"
  )
end

# Artifacts Methods

lane :build_artifacts do |options|
  gradle(task: "clean")
  gradle(task: "cleanArtifacts")
  gradle(task: "assembleDebug")
  gradle(task: "addSourcesToAar")

  copy_artifacts(
    target_path: "artifacts",
    artifacts: [
      "admiral-resources/build/outputs/aar/admiral-resources-debug.aar",
      "admiral-themes/build/outputs/aar/admiral-themes-debug.aar",
      "admiral-uikit-common/build/outputs/aar/admiral-uikit-common-debug.aar",
    ]
  )
end

def add_unreleased_version
  jira_add_version(
    version_attrs: {
      'project' => ENV['JIRA_PROJECT_NAME'],
      'name' => unreleased_version,
      'startDate' => DateTime.current.to_date
    }
  )
end

lane :upload_nexus_lib do |options|
   branch = options[:branch]
   artifactIdSuffix = (branch == "main" || branch == "master" || branch == nil) ? "" : "-#{branch}"

   gradle(task: "clean")
   gradle(
     task: "publish",
     properties: {
       "artifactIdSuffix" => artifactIdSuffix,
     }
   )
end

# Deploy Methods

lane :deploy_appcenter_dev do |options|
  skip_archive = options[:skip_archive] || false
  skip_jira_comment = options[:skip_jira_comment] || false

  puts "skip_archive: #{skip_archive}"
  puts "skip_jira_comment: #{skip_jira_comment}"

  branch_name = git_branch()
  project_name = ENV['JIRA_PROJECT_NAME']
  issue_name = options[:issue_name]

  extracted_issue_name = jira_extract_issue_name(
      text: issue_name || git_branch,
      project_prefix: ENV['JIRA_PROJECT_NAME']
    ) rescue nil

  issue_name = extracted_issue_name if issue_name.nil?
  release_notes = "**Issue:** #{issue_name}\n\n**Branch:** #{branch_name}"

  if !skip_archive
    gradle(task: "clean")

    gradle(
      task: "assembleDebug"
    )
  end

  puts release_notes

  appcenter_upload(
    api_token: ENV['APPCENTER_API_TOKEN_DEV'],
    owner_name: ENV['APPCENTER_OWNER_NAME'],
    owner_type: ENV['APPCENTER_OWNER_TYPE'],
    app_name: ENV['APPCENTER_APP_NAME_DEV'],
    file: "demo/build/outputs/apk/debug/demo-debug.apk",
    destinations: ENV['APPCENTER_DESTINATIONS_DEV'],
    destination_type: "group",
    release_notes: release_notes,
    notify_testers: true
  )

  build_info_hash = lane_context[SharedValues::APPCENTER_BUILD_INFORMATION]
  build_info = BuildInfo.from_hash(build_info_hash)
  build_info.branch_name = branch_name
  build_info.build_url = appcenter_build_dev_url(build_id: build_info.build_id)
  build_info.issue = issue_name
  build_info.internal_version = current_lib_internal_version

  if !skip_jira_comment && !extracted_issue_name.nil?
    attachment_file = "qr-#{build_info.build_id}.png"
    attachment_path = File.join(Dir.pwd, 'cache', attachment_file)

    generate_qr_code(
      file: attachment_path,
      link: build_info.build_url
    )

    comment_body = formatted_build_info_jira(build_info: build_info)
    comment_body += "\n\n!#{attachment_file}!"

    jira_add_comment(
      issue: extracted_issue_name,
      comment_body: comment_body,
      attachment: attachment_path
    )
  end

  puts "\n#{formatted_build_info(build_info: build_info)}"

  chat_id = ENV['TELEGRAM_DEV_CHAT_ID']
  send_message(build_info: build_info, chat_ids: [chat_id])

  gradle(
    task: "clean"
  )
end

lane :deploy_appcenter_prod do |options|
  check_release_issues(
    fix_version: unreleased_version,
    project: ENV['JIRA_PROJECT_NAME'],
    close_status: "ВЫПОЛНЕНО"
  )

  skip_archive = options[:skip_archive] || false
  release_jira_version = options[:release_jira_version] || false

  branch_name = git_branch()
  issues = jira_get_done_issues(fix_version: unreleased_version)
  issues_string = issues.map { |i| "* #{i.summary.gsub('[', '\[').gsub(']', '\]')}" }.join("\n")
  release_notes = "**Release:** #{current_lib_full_version}\n\n**Branch name:** #{branch_name}\n\n**Release notes:**\n#{issues_string}"

  if !skip_archive
    gradle(task: "clean")

    gradle(
      task: "assembleDebug"
    )
  end

  appcenter_upload(
    api_token: ENV['APPCENTER_API_TOKEN'],
    owner_name: ENV['APPCENTER_OWNER_NAME'],
    owner_type: ENV['APPCENTER_OWNER_TYPE'],
    app_name: ENV['APPCENTER_APP_NAME'],
    file: "demo/build/outputs/apk/debug/demo-debug.apk",
    destinations: ENV['APPCENTER_DESTINATIONS_PROD'],
    destination_type: "group",
    release_notes: release_notes,
    notify_testers: true
  )

  build_info_hash = lane_context[SharedValues::APPCENTER_BUILD_INFORMATION]
  build_info = BuildInfo.from_hash(build_info_hash)
  build_info.branch_name = branch_name
  build_info.build_url = appcenter_build_prod_url
  build_info.internal_version = current_lib_internal_version

  puts "\n#{formatted_build_info(build_info: build_info)}"

  if release_jira_version
      replace_version_jira
  end

  chat_id = ENV['TELEGRAM_PROD_CHAT_ID']
  team_chat_id = ENV['TELEGRAM_ADMIRAL_DEV_CHAT_ID']
  send_message(build_info: build_info, chat_ids: [chat_id, team_chat_id])
end

def replace_version_jira
  jira_replace_version(
    version_name: unreleased_version,
    version_attrs: {
      'name' => current_lib_version
    }
  )
end

# Supporting Methods

lane :tag_trigger_teamcity do |options|
  tag = options[:tag] || current_lib_external_version
  add_git_tag(tag: tag)
  system("git push origin #{tag}")
  teamcity_trigger(build_id:ENV['TEAMCITY_BUILD_ID_PROD'], branch_name: "tags/#{tag}")
end

# Code Generation Methods

lane :generate_colors do
  styles = figma_get_styles(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_COLORS_FILE_KEY'],
    style_types: ["FILL"],
  )

  styles.styles.each { |s| s.name = s.name.delete(' ') }

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/ColorPalette.liquid",
    output_file: Dir.pwd + "/../admiral-themes/src/main/java/com/vtb/admiral/themes/ColorPalette.kt"
  )

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/ColorPaletteExt.liquid",
    output_file: Dir.pwd + "/../demo/src/main/java/com/vtb/admiral/demo/features/home/colors/ColorPaletteExt.kt"
  )

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/ColorResPalette.liquid",
    output_file: Dir.pwd + "/../admiral-resources/src/main/res/values/palette.xml"
  )

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/ColorAttrPalette.liquid",
      output_file: Dir.pwd + "/../admiral-uikit/src/main/res/values/attrs_palette.xml"
  )

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/ColorPaletteEnum.liquid",
      output_file: Dir.pwd + "/../admiral-themes/src/main/java/com/vtb/admiral/themes/ColorPaletteEnum.kt"
  )
end

lane :generate_fonts do
  styles = figma_get_styles(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_FONTS_FILE_KEY'],
    style_types: ["TEXT"],
  )

  styles.styles.each { |s| s.font.font_postscript_name = s.font.font_postscript_name || s.font.font_family }

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/FontPalette.liquid",
    output_file: Dir.pwd + "/../admiral-resources/src/main/res/values/typography.xml"
  )

  figma_generate_styles(
    styles: styles.to_json,
    template_file: Dir.pwd + "/../Templates/Typography.liquid",
    output_file: Dir.pwd + "/../admiral-themes/src/main/java/com/vtb/admiral/themes/Typography.kt"
  )

  figma_generate_styles(
      styles: styles.to_json,
      template_file: Dir.pwd + "/../Templates/TypographyAttrs.liquid",
      output_file: Dir.pwd + "/../admiral-uikit/src/main/res/values/attrs_text_style.xml"
    )
end

lane :generate_icons do
  components_list = figma_get_image_links(
    access_token: ENV['FIGMA_ACCESS_TOKEN'],
    file_key: ENV['FIGMA_IMAGES_FILE_KEY'],
    page_filter_regex: 'Icons',
    format: 'svg'
  )

  icons = []

  components_list.components.each { |s|
    name = s.name
        .delete_prefix("Solid / ")
        .delete_prefix("Outline / ")
        .delete_prefix("Solid  / ")
        .delete_prefix("Outline  / ")
        .delete_prefix("Solid /  ")
        .delete_prefix("Outline /  ")
    s.name = "admiral_ic_" + name.sub(" ", "_").sub(" ", "_").sub(" ", "_").sub("-", "_").downcase

    icon = {
      "id" => s.name,
      "name" => name,
      "type" => s.containing_frame.name
    }
    icons.push(icon)
  }

  File.open(Dir.pwd + "/../admiral-resources/src/main/assets/admiral_icons.json","w") do |f|
    f.write(JSON.pretty_generate(icons))
  end

  figma_download_images(
    image_components: components_list.to_json,
    output_folder: Dir.pwd + '/../admiral-resources/src/main/res',
    output_format: 'res',
    naming_style: 'snakecase',
    include_page_name: false,
    convert_svg_to_vector: true,
    folder_depth: 0
  )
end

lane :snapshot_test do
    gradle(tasks: "detekt")
    gradle(tasks: "cleanScreenshotsTempFolder")
    gradle(tasks: "executeScreenshotTests")
end

lane :start_check_release_issues do |options|
   status = options[:status] || "ВЫПОЛНЕНО"
   fix_version = options[:fix_version] || current_lib_version
   check_release_issues(
    fix_version: fix_version,
    project: ENV['JIRA_PROJECT_NAME'],
    close_status: status
  )
end

lane :set_version do |options|
  internal = options[:internal_version]
  external = options[:external_version]

  set_version(
    external_version: external,
    internal_version: internal
  )
end

lane :finish_release_version do |options|
  external = options[:external_version]
  internal = current_lib_internal_version
  set_version(
    external_version: external,
    internal_version: internal,
  )
end

lane :start_next_release_version do
  external = "0.0.0"
  internal = "#{Integer(current_lib_internal_version) + 1}"
  set_version(external_version: external, internal_version: internal)
  add_unreleased_version
end