@file:Suppress("LongMethod")

package com.admiral.themes

import android.graphics.Color
import android.os.Parcelable
import androidx.annotation.ColorInt
import kotlinx.parcelize.Parcelize
import org.json.JSONObject

/**
 * AdmiralUI
 * Generated by Fastlane Figma Plugin.
 */

@Parcelize
@Suppress("LongParameterList")
open class ColorPalette(
    val name: String,
    val disabledAlpha: Double, {% for style_name in common_style_names %}
    val {{ style_name | default_format }}: Int,{% endfor %}
) : Parcelable

internal fun ColorPalette.toJSON(): JSONObject {
    return JSONObject().apply {
        put("name", name)
        put("disabledAlpha", disabledAlpha){% for style_name in common_style_names %}
        put("{{ style_name | default_format }}", {{ style_name | default_format }}){% endfor %}
    }
}

internal fun JSONObject.toPalette(): ColorPalette {
    return ColorPalette(
        name = getString("name"),
        disabledAlpha = getDouble("disabledAlpha"),{% for style_name in common_style_names %}
        {{ style_name | default_format }} = getInt("{{ style_name | default_format }}"),{% endfor %}
    )
}
{% for group in groups %}
internal fun {{ group.name | default_format }}Palette() = ColorPalette(
    name = {% if group.is_dark %}THEME_DARK{% else %}THEME_LIGHT{% endif %},
    disabledAlpha = 0.6,{% for style in group.styles %}
    {{ style.name_info.style_name | default_format }} = Color.parseColor("{{ style.color.hex_with_alpha }}"){% if forloop.last == false %},{% endif %}{% endfor %}
)
{% endfor %}
fun ColorPalette.changeColor(colorName: String, @ColorInt color: Int): ColorPalette {
    return when (colorName) { {% for style_name in common_style_names %}
        "{{ style_name | default_format }}" -> copy({{ style_name | default_format }} = color){% endfor %}
        else -> this
    }
}

@Suppress("LongParameterList")
fun ColorPalette.copy(
    name: String = this.name,
    disabledAlpha: Double = this.disabledAlpha,{% for style_name in common_style_names %}
    {{ style_name | default_format }}: Int = this.{{ style_name | default_format }},{% endfor %}
): ColorPalette {
    return ColorPalette(
        name,
        disabledAlpha,{% for style_name in common_style_names %}
        {{ style_name | default_format }},{% endfor %}
    )
}