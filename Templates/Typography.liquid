package com.admiral.themes

import android.os.Parcelable
import androidx.annotation.StyleRes
import kotlinx.parcelize.Parcelize
import org.json.JSONObject

/**
 * AdmiralUI
 * Generated by Fastlane Figma Plugin.
 */

@Parcelize
@Suppress("LongParameterList")
open class Typography({% for style in styles %}
    open val {{ style.name_info.style_name | remove: "_" | remove: " " | downcase}}: Font = Font(R.style.AdmiralTextAppearance_{{ style.name_info.style_name | remove: "_" | remove: " "}}, R.style.AdmiralTextAppearance_{{ style.name_info.style_name | remove: "_" | remove: " "}}_Fixed),{% endfor %}
    open val pinNum: Font = Font(R.style.AdmiralTextAppearance_PinNum, R.style.AdmiralTextAppearance_PinNum_Fixed),
) : Parcelable {

    companion object {
        @StyleRes
        fun getStyle(font: Font, isFixedForced: Boolean = false): Int {
            return if (ThemeManager.theme.isTypographyFixed || isFixedForced) {
                font.fixed ?: font.scaled
            } else {
                font.scaled
            }
        }

        /**
         * @return [Font] by index or [BODY_1] if index is not defined
         */
        @Suppress("MagicNumber")
        fun getStyleById(index: Int): Font = when (index){ {% for style in styles %}
            {{ forloop.index }} -> ThemeManager.theme.typography.{{ style.name_info.style_name | remove: "_" | remove: " " | downcase}}{% endfor %}
            {{ styles.size | plus: 1}} -> ThemeManager.theme.typography.pinNum
            else -> ThemeManager.theme.typography.body1
        }

        /**
         * const values to get font's id.
         */
        {% for style in styles %}const val {{ style.name_info.style_name | remove: "_" | remove: " " | downcase}} = {{ forloop.index }}
        {% endfor %}const val pinNum = {{ styles.size | plus: 1}}
    }
}

internal fun Typography.toJSON(): JSONObject {
    return JSONObject().apply { {% for style in styles %}
        put("{{ style.name_info.style_name | remove: "_" | remove: " " | downcase}}", {{ style.name_info.style_name | remove: "_" | remove: " " | downcase}}.toJSON()){% endfor %}
    }
}

internal fun JSONObject.toTypography(): Typography {
    return Typography({% for style in styles %}
        {{ style.name_info.style_name | remove: "_" | remove: " " | downcase}} = getJSONObject("{{ style.name_info.style_name | remove: "_" | remove: " " | downcase}}").toFont(),{% endfor %}
    )
}

@Parcelize
data class Font(val scaled: Int, val fixed: Int? = null) : Parcelable

internal fun JSONObject.toFont(): Font {
    return Font(
        scaled = getInt("scaled"),
        fixed = getInt("fixed")
    )
}

internal fun Font.toJSON(): JSONObject {
    return JSONObject().apply {
        put("scaled", scaled)
        put("fixed", fixed)
    }
}