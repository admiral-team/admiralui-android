package com.admiral.themes

import android.os.Parcelable
import androidx.annotation.StyleRes
import kotlinx.parcelize.Parcelize
import org.json.JSONObject

/**
 * AdmiralUI
 * Generated by Fastlane Figma Plugin.
 */

@Parcelize
@Suppress("LongParameterList")
open class Typography(
    open val body1: Font = Font(R.style.AdmiralTextAppearance_Body1, R.style.AdmiralTextAppearance_Body1_Fixed),
    open val body2: Font = Font(R.style.AdmiralTextAppearance_Body2, R.style.AdmiralTextAppearance_Body2_Fixed),
    open val caption1: Font = Font(R.style.AdmiralTextAppearance_Caption1, R.style.AdmiralTextAppearance_Caption1_Fixed),
    open val caption2: Font = Font(R.style.AdmiralTextAppearance_Caption2, R.style.AdmiralTextAppearance_Caption2_Fixed),
    open val headline: Font = Font(R.style.AdmiralTextAppearance_Headline, R.style.AdmiralTextAppearance_Headline_Fixed),
    open val largetitle1: Font = Font(R.style.AdmiralTextAppearance_LargeTitle1, R.style.AdmiralTextAppearance_LargeTitle1_Fixed),
    open val largetitle2: Font = Font(R.style.AdmiralTextAppearance_LargeTitle2, R.style.AdmiralTextAppearance_LargeTitle2_Fixed),
    open val overline: Font = Font(R.style.AdmiralTextAppearance_OVERLINE, R.style.AdmiralTextAppearance_OVERLINE_Fixed),
    open val subhead3: Font = Font(R.style.AdmiralTextAppearance_Subhead3, R.style.AdmiralTextAppearance_Subhead3_Fixed),
    open val subhead1: Font = Font(R.style.AdmiralTextAppearance_Subhead1, R.style.AdmiralTextAppearance_Subhead1_Fixed),
    open val subhead2: Font = Font(R.style.AdmiralTextAppearance_Subhead2, R.style.AdmiralTextAppearance_Subhead2_Fixed),
    open val subtitle1: Font = Font(R.style.AdmiralTextAppearance_Subtitle1, R.style.AdmiralTextAppearance_Subtitle1_Fixed),
    open val subtitle2: Font = Font(R.style.AdmiralTextAppearance_Subtitle2, R.style.AdmiralTextAppearance_Subtitle2_Fixed),
    open val subtitle3: Font = Font(R.style.AdmiralTextAppearance_Subtitle3, R.style.AdmiralTextAppearance_Subtitle3_Fixed),
    open val title1: Font = Font(R.style.AdmiralTextAppearance_Title1, R.style.AdmiralTextAppearance_Title1_Fixed),
    open val title2: Font = Font(R.style.AdmiralTextAppearance_Title2, R.style.AdmiralTextAppearance_Title2_Fixed),
    open val pinNum: Font = Font(R.style.AdmiralTextAppearance_PinNum, R.style.AdmiralTextAppearance_PinNum_Fixed),
) : Parcelable {

    companion object {
        @StyleRes
        fun getStyle(font: Font, isFixedForced: Boolean = false): Int {
            return if (ThemeManager.theme.isTypographyFixed || isFixedForced) {
                font.fixed ?: font.scaled
            } else {
                font.scaled
            }
        }

        /**
         * @return [Font] by index or [BODY_1] if index is not defined
         */
        @Suppress("MagicNumber")
        fun getStyleById(index: Int): Font = when (index){ 
            1 -> ThemeManager.theme.typography.body1
            2 -> ThemeManager.theme.typography.body2
            3 -> ThemeManager.theme.typography.caption1
            4 -> ThemeManager.theme.typography.caption2
            5 -> ThemeManager.theme.typography.headline
            6 -> ThemeManager.theme.typography.largetitle1
            7 -> ThemeManager.theme.typography.largetitle2
            8 -> ThemeManager.theme.typography.overline
            9 -> ThemeManager.theme.typography.subhead3
            10 -> ThemeManager.theme.typography.subhead1
            11 -> ThemeManager.theme.typography.subhead2
            12 -> ThemeManager.theme.typography.subtitle1
            13 -> ThemeManager.theme.typography.subtitle2
            14 -> ThemeManager.theme.typography.subtitle3
            15 -> ThemeManager.theme.typography.title1
            16 -> ThemeManager.theme.typography.title2
            17 -> ThemeManager.theme.typography.pinNum
            else -> ThemeManager.theme.typography.body1
        }

        /**
         * const values to get font's id.
         */
        const val body1 = 1
        const val body2 = 2
        const val caption1 = 3
        const val caption2 = 4
        const val headline = 5
        const val largetitle1 = 6
        const val largetitle2 = 7
        const val overline = 8
        const val subhead3 = 9
        const val subhead1 = 10
        const val subhead2 = 11
        const val subtitle1 = 12
        const val subtitle2 = 13
        const val subtitle3 = 14
        const val title1 = 15
        const val title2 = 16
        const val pinNum = 17
    }
}

internal fun Typography.toJSON(): JSONObject {
    return JSONObject().apply { 
        put("body1", body1.toJSON())
        put("body2", body2.toJSON())
        put("caption1", caption1.toJSON())
        put("caption2", caption2.toJSON())
        put("headline", headline.toJSON())
        put("largetitle1", largetitle1.toJSON())
        put("largetitle2", largetitle2.toJSON())
        put("overline", overline.toJSON())
        put("subhead3", subhead3.toJSON())
        put("subhead1", subhead1.toJSON())
        put("subhead2", subhead2.toJSON())
        put("subtitle1", subtitle1.toJSON())
        put("subtitle2", subtitle2.toJSON())
        put("subtitle3", subtitle3.toJSON())
        put("title1", title1.toJSON())
        put("title2", title2.toJSON())
    }
}

internal fun JSONObject.toTypography(): Typography {
    return Typography(
        body1 = getJSONObject("body1").toFont(),
        body2 = getJSONObject("body2").toFont(),
        caption1 = getJSONObject("caption1").toFont(),
        caption2 = getJSONObject("caption2").toFont(),
        headline = getJSONObject("headline").toFont(),
        largetitle1 = getJSONObject("largetitle1").toFont(),
        largetitle2 = getJSONObject("largetitle2").toFont(),
        overline = getJSONObject("overline").toFont(),
        subhead3 = getJSONObject("subhead3").toFont(),
        subhead1 = getJSONObject("subhead1").toFont(),
        subhead2 = getJSONObject("subhead2").toFont(),
        subtitle1 = getJSONObject("subtitle1").toFont(),
        subtitle2 = getJSONObject("subtitle2").toFont(),
        subtitle3 = getJSONObject("subtitle3").toFont(),
        title1 = getJSONObject("title1").toFont(),
        title2 = getJSONObject("title2").toFont(),
    )
}

@Parcelize
data class Font(val scaled: Int, val fixed: Int? = null) : Parcelable

internal fun JSONObject.toFont(): Font {
    return Font(
        scaled = getInt("scaled"),
        fixed = getInt("fixed")
    )
}

internal fun Font.toJSON(): JSONObject {
    return JSONObject().apply {
        put("scaled", scaled)
        put("fixed", fixed)
    }
}